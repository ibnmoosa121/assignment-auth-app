import { useState, useEffect } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import styles from '../styles/Home.module.css';
import { supabase } from '../utils/supabaseClient';

export default function P2PPage() {
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [formData, setFormData] = useState({
    amount: '',
    ifsc: '',
    account_number: '',  // Changed from accountNumber to account_number
    account_name: '',    // Changed from accountName to account_name
    bank_name: '',       // Changed from bankName to bank_name
    upi_id: ''           // Changed from upiId to upi_id
  });
  const [userInfo, setUserInfo] = useState({
    id: '',
    email: '',
    role: ''
  });
  const [accounts, setAccounts] = useState([]);
  const [dailyTotals, setDailyTotals] = useState({});
  const router = useRouter();

  useEffect(() => {
    // Check if user is already signed in
    const checkUser = async () => {
      const { data } = await supabase.auth.getSession();
      const sessionUser = data.session?.user || null;
      setUser(sessionUser);
      
      // If no user is logged in, redirect to auth page
      if (!sessionUser) {
        router.push('/auth');
      } else {
        setIsLoading(false);
      }
    };
    
    checkUser();
    
    // Listen for auth changes
    const { data: authListener } = supabase.auth.onAuthStateChange(
      (event, session) => {
        const currentUser = session?.user || null;
        setUser(currentUser);
        
        if (!currentUser) {
          // If user signs out, redirect to auth page
          router.push('/auth');
        }
      }
    );
    
    return () => {
      authListener?.subscription?.unsubscribe();
    };
  }, [router]);

  const handleSignOut = async () => {
    await supabase.auth.signOut();
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
  };
  
  // Function to delete an account
  const handleDeleteAccount = async (accountId) => {
    if (!confirm('Are you sure you want to delete this account?')) {
      return;
    }
    
    try {
      const { error } = await supabase
        .from('accounts')
        .delete()
        .eq('id', accountId);
      
      if (error) {
        console.error('Error deleting account:', error);
        alert('Failed to delete account. Please try again.');
        return;
      }
      
      // Update the accounts list by removing the deleted account
      setAccounts(accounts.filter(account => account.id !== accountId));
      
      // Recalculate daily totals
      const updatedAccounts = accounts.filter(account => account.id !== accountId);
      const totals = {};
      updatedAccounts.forEach(account => {
        const date = account.date;
        if (!totals[date]) {
          totals[date] = 0;
        }
        totals[date] += parseFloat(account.amount);
      });
      setDailyTotals(totals);
      
      alert('Account deleted successfully.');
    } catch (error) {
      console.error('Unexpected error deleting account:', error);
      alert('An unexpected error occurred. Please try again.');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      // Create a new account with current form data
      const newAccount = {
        ...formData,
        amount: parseFloat(formData.amount),
        date: new Date().toISOString().split('T')[0], // Current date in YYYY-MM-DD format
        verified: false, // Initial verification status
        created_by: user?.id // Track who created this account
      };
      
      // Ensure the accounts table exists
      const tableExists = await ensureAccountsTableExists();
      
      if (!tableExists) {
        alert('The accounts table does not exist in your Supabase database. Please create it first.');
        console.log('Please create the accounts table in your Supabase dashboard with the columns shown in the console.');
        return;
      }
      
      // Log the account being created for debugging
      console.log('Creating account:', newAccount);
      
      // Save the account to Supabase
      const { data, error } = await supabase
        .from('accounts')
        .insert([newAccount])
        .select();
      
      if (error) {
        console.error('Error adding account:', error);
        alert(`Failed to add account: ${error.message || JSON.stringify(error)}`);
        return;
      }
      
      // Add the new account to the local accounts list
      const savedAccount = data[0];
      setAccounts([...accounts, savedAccount]);
      
      resetForm();
      
      
      // Show success message
      alert('Account added successfully!');
    } catch (error) {
      console.error('Error in handleSubmit:', error);
      alert('An error occurred while adding the account. Please try again.');
    }
  };

  // Ensure the accounts table exists in Supabase
  const ensureAccountsTableExists = async () => {
    try {
      // Check if the table exists by attempting to query it
      const { error } = await supabase
        .from('accounts')
        .select('count')
        .limit(1);
      
      // If there's no error, the table exists
      if (!error) {
        console.log('Accounts table exists in Supabase');
        return true;
      }
      
      // If there's an error, log detailed information
      console.error('Error checking accounts table:', error);
      console.log('You need to create the accounts table in Supabase with these columns:');
      console.log('- id: uuid (primary key, default: uuid_generate_v4())');
      console.log('- amount: float8 (not null)');
      console.log('- ifsc: text (not null)');
      console.log('- account_number: text (not null)');
      console.log('- account_name: text (not null)');
      console.log('- bank_name: text (not null)');
      console.log('- upi_id: text');
      console.log('- date: date (not null)');
      console.log('- verified: boolean (default: false)');
      console.log('- created_by: uuid');
      return false;
    } catch (error) {
      console.error('Error checking accounts table:', error);
      return false;
    }
  };

  // Load accounts and calculate daily totals
  useEffect(() => {
    const loadAccounts = async () => {
      if (isLoading || !user) return;
      
      try {
        await ensureAccountsTableExists();
        
        // Fetch all accounts (not just created by this user)
        // This allows Order Givers to see all accounts in the system
        const { data: accountsData, error } = await supabase
          .from('accounts')
          .select('*');
        
        if (error) {
          console.error('Error fetching accounts:', error);
          return;
        }
        
        setAccounts(accountsData || []);
        
        // Calculate daily totals
        const totals = {};
        accountsData?.forEach(account => {
          const date = account.date;
          if (!totals[date]) {
            totals[date] = 0;
          }
          totals[date] += account.amount;
        });
        setDailyTotals(totals);
      } catch (error) {
        console.error('Error loading accounts:', error);
      }
    };
    
    loadAccounts();
    
    // Set up real-time subscription to accounts table
    const subscription = supabase
      .channel('accounts-channel')
      .on('postgres_changes', 
        { event: '*', schema: 'public', table: 'accounts' }, 
        payload => {
          console.log('Real-time update received:', payload);
          
          // Reload all accounts when there's any change
          loadAccounts();
        }
      )
      .subscribe();
    
    // Clean up subscription when component unmounts
    return () => {
      subscription.unsubscribe();
    };
  }, [isLoading, user]);

  // Load user info from Supabase Auth
  useEffect(() => {
    const loadUserInfo = async () => {
      if (isLoading || !user) return;
      
      try {
        // Get the current user's information
        const { data: currentUser } = await supabase.auth.getUser();
        console.log('Current user:', currentUser?.user);
        
        // Get the user ID and email from the current session
        const userId = currentUser?.user?.id;
        const userEmail = currentUser?.user?.email;
        
        // Display user info in the UI
        setUserInfo({
          id: userId,
          email: userEmail,
          role: currentUser?.user?.user_metadata?.role || 'order_giver'
        });
      } catch (error) {
        console.error('Error loading user info:', error);
      }
    };
    
    loadUserInfo();
  }, [isLoading, user]);

  // Show loading state or redirect if not authenticated
  if (isLoading) {
    return (
      <div className={styles.container}>
        <div className={styles.loadingContainer}>
          <div className={styles.loadingSpinner}></div>
          <p>Loading...</p>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>P2P Transactions</title>
        <meta name="description" content="P2P transaction page" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className={styles.header}>
        <div className={styles.logo}>P2P Platform</div>
        <nav className={styles.nav}>
          <Link href="/" className={styles.navLink}>Home</Link>
          <Link href="/p2p" className={`${styles.navLink} ${styles.activeLink}`}>P2P</Link>
        </nav>
        <div className={styles.auth}>
          {user && (
            <div className={styles.userSection}>
              <span className={styles.userEmail}>{user.user_metadata?.username || user.email}</span>
              <button onClick={handleSignOut} className={styles.signOutBtn}>Sign Out</button>
            </div>
          )}
        </div>
      </header>

      <main className={styles.main} style={{ width: '100%', padding: '0 20px' }}>
        <h1 className={styles.title} style={{ marginBottom: '1rem', textAlign: 'center' }}>P2P Transaction</h1>
        
        {/* User Information Section Removed */}
        
        <div style={{ width: '100%', maxWidth: '800px', margin: '0 auto' }}>
          <div style={{ width: '100%' }}>
            <h2 className={styles.sectionTitle} style={{ width: '100%', textAlign: 'center', marginBottom: '1.5rem' }}>Add New Account</h2>
            <form onSubmit={handleSubmit} className={styles.p2pForm} style={{ width: '100%' }}>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '15px', width: '100%' }}>
                {/* First row - Amount and Bank Name */}
                <div style={{ display: 'flex', gap: '15px', width: '100%' }}>
                  <div className={styles.formGroup} style={{ flex: '1', backgroundColor: 'rgba(38, 193, 126, 0.05)', padding: '10px', borderRadius: '8px' }}>
                    <label htmlFor="amount" style={{ fontWeight: 'bold', color: '#26C17E', marginBottom: '5px', display: 'block' }}>Amount (INR)</label>
                    <input
                      type="number"
                      id="amount"
                      name="amount"
                      value={formData.amount}
                      onChange={handleChange}
                      placeholder="Enter amount"
                      required
                      className={styles.formInput}
                      style={{ borderColor: '#26C17E', width: '100%', padding: '8px' }}
                    />
                  </div>
                  
                  <div className={styles.formGroup} style={{ flex: '1' }}>
                    <label htmlFor="bank_name" style={{ marginBottom: '5px', display: 'block' }}>Bank Name</label>
                    <input
                      type="text"
                      id="bank_name"
                      name="bank_name"
                      value={formData.bank_name}
                      onChange={handleChange}
                      placeholder="Enter bank name"
                      required
                      className={styles.formInput}
                      style={{ width: '100%', padding: '8px' }}
                    />
                  </div>
                </div>
                
                {/* Second row - IFSC and Account Number */}
                <div style={{ display: 'flex', gap: '15px', width: '100%' }}>
                  <div className={styles.formGroup} style={{ flex: '1' }}>
                    <label htmlFor="ifsc" style={{ marginBottom: '5px', display: 'block' }}>IFSC Code</label>
                    <input
                      type="text"
                      id="ifsc"
                      name="ifsc"
                      value={formData.ifsc}
                      onChange={handleChange}
                      placeholder="Enter IFSC code"
                      required
                      className={styles.formInput}
                      style={{ width: '100%', padding: '8px' }}
                    />
                  </div>
                  
                  <div className={styles.formGroup} style={{ flex: '1' }}>
                    <label htmlFor="account_number" style={{ marginBottom: '5px', display: 'block' }}>Account Number</label>
                    <input
                      type="text"
                      id="account_number"
                      name="account_number"
                      value={formData.account_number}
                      onChange={handleChange}
                      placeholder="Enter account number"
                      required
                      className={styles.formInput}
                      style={{ width: '100%', padding: '8px' }}
                    />
                  </div>
                </div>
                
                {/* Third row - Account Holder Name and UPI ID */}
                <div style={{ display: 'flex', gap: '15px', width: '100%' }}>
                  <div className={styles.formGroup} style={{ flex: '1' }}>
                    <label htmlFor="account_name" style={{ marginBottom: '5px', display: 'block' }}>Account Holder Name</label>
                    <input
                      type="text"
                      id="account_name"
                      name="account_name"
                      value={formData.account_name}
                      onChange={handleChange}
                      placeholder="Enter account holder name"
                      required
                      className={styles.formInput}
                      style={{ width: '100%', padding: '8px' }}
                    />
                  </div>
                  
                  <div className={styles.formGroup} style={{ flex: '1' }}>
                    <label htmlFor="upi_id" style={{ marginBottom: '5px', display: 'block' }}>UPI ID (Optional)</label>
                    <input
                      type="text"
                      id="upi_id"
                      name="upi_id"
                      value={formData.upi_id}
                      onChange={handleChange}
                      placeholder="Enter UPI ID (optional)"
                      className={styles.formInput}
                      style={{ width: '100%', padding: '8px' }}
                    />
                  </div>
                </div>
              </div>
              
              <div style={{ marginTop: '15px' }}>
                <button type="submit" className={styles.submitButton} style={{ width: '100%', padding: '10px', fontSize: '1rem', fontWeight: 'bold', backgroundColor: '#26C17E', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}>
                  Add Account
          </div>
        )}
      </div>
    </header>

    <main className={styles.main} style={{ width: '100%', padding: '0 20px' }}>
      <h1 className={styles.title} style={{ marginBottom: '1rem', textAlign: 'center' }}>P2P Transaction</h1>
      
      {/* User Information Section Removed */}
      
      <div style={{ width: '100%', maxWidth: '800px', margin: '0 auto' }}>
        <div style={{ width: '100%' }}>
          <h2 className={styles.sectionTitle} style={{ width: '100%', textAlign: 'center', marginBottom: '1.5rem' }}>Add New Account</h2>
          <form onSubmit={handleSubmit} className={styles.p2pForm} style={{ width: '100%' }}>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '15px', width: '100%' }}>
              {/* First row - Amount and Bank Name */}
              <div style={{ display: 'flex', gap: '15px', width: '100%' }}>
                <div className={styles.formGroup} style={{ flex: '1', backgroundColor: 'rgba(38, 193, 126, 0.05)', padding: '10px', borderRadius: '8px' }}>
                  <label htmlFor="amount" style={{ fontWeight: 'bold', color: '#26C17E', marginBottom: '5px', display: 'block' }}>Amount (INR)</label>
                  <input
                    type="number"
                    id="amount"
                    name="amount"
                    value={formData.amount}
                    onChange={handleChange}
                    placeholder="Enter amount"
                    required
                    className={styles.formInput}
                    style={{ borderColor: '#26C17E', width: '100%', padding: '8px' }}
                  />
                </div>
                
                <div className={styles.formGroup} style={{ flex: '1' }}>
                  <label htmlFor="bank_name" style={{ marginBottom: '5px', display: 'block' }}>Bank Name</label>
                  <input
                    type="text"
                    id="bank_name"
                    name="bank_name"
                    value={formData.bank_name}
                    onChange={handleChange}
                    placeholder="Enter bank name"
                    required
                    className={styles.formInput}
                    style={{ width: '100%', padding: '8px' }}
                  />
                </div>
              </div>
              
              {/* Second row - IFSC and Account Number */}
              <div style={{ display: 'flex', gap: '15px', width: '100%' }}>
                <div className={styles.formGroup} style={{ flex: '1' }}>
                  <label htmlFor="ifsc" style={{ marginBottom: '5px', display: 'block' }}>IFSC Code</label>
                  <input
                    type="text"
                    id="ifsc"
                    name="ifsc"
                    value={formData.ifsc}
                    onChange={handleChange}
                    placeholder="Enter IFSC code"
                    required
                    className={styles.formInput}
                    style={{ width: '100%', padding: '8px' }}
                  />
                </div>
                
                <div className={styles.formGroup} style={{ flex: '1' }}>
                  <label htmlFor="account_number" style={{ marginBottom: '5px', display: 'block' }}>Account Number</label>
                  <input
                    type="text"
                    id="account_number"
                    name="account_number"
                    value={formData.account_number}
                    onChange={handleChange}
                    placeholder="Enter account number"
                    required
                    className={styles.formInput}
                    style={{ width: '100%', padding: '8px' }}
                  />
                </div>
              </div>
              
              {/* Third row - Account Holder Name and UPI ID */}
              <div style={{ display: 'flex', gap: '15px', width: '100%' }}>
                <div className={styles.formGroup} style={{ flex: '1' }}>
                  <label htmlFor="account_name" style={{ marginBottom: '5px', display: 'block' }}>Account Holder Name</label>
                  <input
                    type="text"
                    id="account_name"
                    name="account_name"
                    value={formData.account_name}
                    onChange={handleChange}
                    placeholder="Enter account holder name"
                    required
                    className={styles.formInput}
                    style={{ width: '100%', padding: '8px' }}
                  />
                </div>
                
                <div className={styles.formGroup} style={{ flex: '1' }}>
                  <label htmlFor="upi_id" style={{ marginBottom: '5px', display: 'block' }}>UPI ID (Optional)</label>
                  <input
                    type="text"
                    id="upi_id"
                    name="upi_id"
                    value={formData.upi_id}
                    onChange={handleChange}
                    placeholder="Enter UPI ID (optional)"
                    className={styles.formInput}
                    style={{ width: '100%', padding: '8px' }}
                  />
                </div>
              </div>
            </div>
            
            <div style={{ marginTop: '15px' }}>
              <button type="submit" className={styles.submitButton} style={{ width: '100%', padding: '10px', fontSize: '1rem', fontWeight: 'bold', backgroundColor: '#26C17E', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}>
                Add Account
              </button>
            </div>
          </form>
        </div>
        
        <div style={{ marginTop: '40px', width: '100%' }}>
          <h2 className={styles.sectionTitle} style={{ textAlign: 'center', marginBottom: '1.5rem' }}>Account Details</h2>
          
          {accounts.length > 0 ? (
            <div className={styles.tableWrapper} style={{ overflowX: 'auto' }}>
              <table className={styles.accountsTable} style={{ fontSize: '0.85rem', borderCollapse: 'collapse', width: '100%' }}>
                <thead style={{ backgroundColor: '#f8f8f8' }}>
                  <tr>
                    <th style={{ padding: '8px 5px' }}>Date</th>
                    <th style={{ padding: '8px 5px' }}>Name</th>
                    <th style={{ padding: '8px 5px' }}>Bank</th>
                    <th style={{ padding: '8px 5px' }}>Acc. Number</th>
                    <th style={{ padding: '8px 5px' }}>Amount</th>
                    <th style={{ padding: '8px 5px' }}>Status</th>
                    <th style={{ padding: '8px 5px' }}>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {accounts.map((account) => (
                    <tr key={account.id} className={account.verified ? styles.verifiedRow : ''} style={{ borderBottom: '1px solid #eee' }}>
                      <td style={{ padding: '6px 5px' }}>{account.date}</td>
                      <td style={{ padding: '6px 5px' }}>{account.account_name}</td>
                      <td style={{ padding: '6px 5px' }}>{account.bank_name}</td>
                      <td style={{ padding: '6px 5px' }}>
                        <span title={`IFSC: ${account.ifsc}`}>{account.account_number}</span>
                      </td>
                      <td style={{ padding: '6px 5px', fontWeight: 'bold' }} className={styles.amountCell}>
                        ₹{parseFloat(account.amount).toLocaleString('en-IN')}
                      </td>
                      <td style={{ padding: '6px 5px' }}>
                        <span style={{
                          padding: '2px 6px',
                          borderRadius: '4px',
                          fontSize: '0.75rem',
                          backgroundColor: account.verified ? 'rgba(38, 193, 126, 0.1)' : 'rgba(255, 193, 7, 0.1)',
                          color: account.verified ? '#26C17E' : '#FFC107'
                        }}>
                          {account.verified ? 'Verified' : 'Pending'}
                        </span>
                      </td>
                      <td style={{ padding: '6px 5px' }}>
                        <button 
                          onClick={() => handleDeleteAccount(account.id)} 
                          style={{
                            background: 'none',
                            border: 'none',
                            color: '#ff4d4f',
                            cursor: 'pointer',
                            padding: '2px 5px',
                            fontSize: '0.8rem',
                            borderRadius: '3px'
                          }}
                          title="Delete this account"
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <p className={styles.noDataMessage}>No accounts added yet.</p>
          )}
          
          {Object.keys(dailyTotals).length > 0 && (
            <div className={styles.dailyTotalsSection}>
              <h3 className={styles.sectionSubtitle}>Daily Totals</h3>
              <div className={styles.tableWrapper}>
                <table className={styles.totalsTable}>
                  <thead>
                    <tr>
                      <th>Date</th>
                      <th>Total Amount (INR)</th>
                      <th style={{ padding: '8px 5px' }}>Date</th>
                      <th style={{ padding: '8px 5px' }}>Name</th>
                      <th style={{ padding: '8px 5px' }}>Bank</th>
                      <th style={{ padding: '8px 5px' }}>Acc. Number</th>
                      <th style={{ padding: '8px 5px' }}>Amount</th>
                      <th style={{ padding: '8px 5px' }}>Status</th>
                      <th style={{ padding: '8px 5px' }}>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {accounts.map((account) => (
                      <tr key={account.id} className={account.verified ? styles.verifiedRow : ''} style={{ borderBottom: '1px solid #eee' }}>
                        <td style={{ padding: '6px 5px' }}>{account.date}</td>
                        <td style={{ padding: '6px 5px' }}>{account.account_name}</td>
                        <td style={{ padding: '6px 5px' }}>{account.bank_name}</td>
                        <td style={{ padding: '6px 5px' }}>
                          <span title={`IFSC: ${account.ifsc}`}>{account.account_number}</span>
                        </td>
                        <td style={{ padding: '6px 5px', fontWeight: 'bold' }} className={styles.amountCell}>
                          ₹{parseFloat(account.amount).toLocaleString('en-IN')}
                        </td>
                        <td style={{ padding: '6px 5px' }}>
                          <span style={{
                            padding: '2px 6px',
                            borderRadius: '4px',
                            fontSize: '0.75rem',
                            backgroundColor: account.verified ? 'rgba(38, 193, 126, 0.1)' : 'rgba(255, 193, 7, 0.1)',
                            color: account.verified ? '#26C17E' : '#FFC107'
                          }}>
                            {account.verified ? 'Verified' : 'Pending'}
                          </span>
                        </td>
                        <td style={{ padding: '6px 5px' }}>
                          <button 
                            onClick={() => handleDeleteAccount(account.id)} 
                            style={{
                              background: 'none',
                              border: 'none',
                              color: '#ff4d4f',
                              cursor: 'pointer',
                              padding: '2px 5px',
                              fontSize: '0.8rem',
                              borderRadius: '3px'
                            }}
                            title="Delete this account"
                          >
                            Delete
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <p className={styles.noDataMessage}>No accounts added yet.</p>
            )}
            
            {Object.keys(dailyTotals).length > 0 && (
              <div className={styles.dailyTotalsSection}>
                <h3 className={styles.sectionSubtitle}>Daily Totals</h3>
                <div className={styles.tableWrapper}>
                  <table className={styles.totalsTable}>
                    <thead>
                      <tr>
                        <th>Date</th>
                        <th>Total Amount (INR)</th>
                      </tr>
                    </thead>
                    <tbody>
                      {Object.entries(dailyTotals).map(([date, total]) => (
                        <tr key={date}>
                          <td>{date}</td>
                          <td className={styles.amountCell}>{total.toLocaleString('en-IN')}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <p>© 2025 NovaP2P. All rights reserved.</p>
      </footer>
    </div>
  );
}
