import { useState, useEffect } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import styles from '../styles/Home.module.css';
import { supabase } from '../utils/supabaseClient';

export default function P2PPage() {
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [formData, setFormData] = useState({
    amount: '',
    ifsc: '',
    account_number: '',  // Changed from accountNumber to account_number
    account_name: '',    // Changed from accountName to account_name
    bank_name: '',       // Changed from bankName to bank_name
    upi_id: ''           // Changed from upiId to upi_id
  });
  const [userInfo, setUserInfo] = useState({
    id: '',
    email: '',
    role: ''
  });
  const [accounts, setAccounts] = useState([]);
  const [dailyTotals, setDailyTotals] = useState({});
  const router = useRouter();

  // Function to reset form fields
  const resetForm = () => {
    setFormData({
      amount: '',
      ifsc: '',
      account_number: '',
      account_name: '',
      bank_name: '',
      upi_id: ''
    });
  };

  useEffect(() => {
    const checkUser = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (user) {
        setUser(user);
        fetchUserInfo(user.id);
        fetchAccounts(user.id);
      } else {
        router.push('/auth');
      }
      setIsLoading(false);
    };

    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      if (!session) {
        router.push('/auth');
      }
    });

    checkUser();

    return () => {
      subscription.unsubscribe();
    };
  }, [router]);

  const fetchUserInfo = async (userId) => {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', userId)
        .single();

      if (error) throw error;
      if (data) {
        setUserInfo({
          id: data.id,
          email: data.email,
          role: data.role
        });
      }
    } catch (error) {
      console.error('Error fetching user info:', error);
    }
  };

  const fetchAccounts = async (userId) => {
    try {
      const { data, error } = await supabase
        .from('accounts')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (error) throw error;
      if (data) {
        setAccounts(data);
        calculateDailyTotals(data);
      }
    } catch (error) {
      console.error('Error fetching accounts:', error);
    }
  };

  const calculateDailyTotals = (accountsData) => {
    const totals = {};
    accountsData.forEach(account => {
      const date = new Date(account.created_at).toLocaleDateString();
      if (!totals[date]) {
        totals[date] = 0;
      }
      totals[date] += parseFloat(account.amount);
    });
    setDailyTotals(totals);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const { data, error } = await supabase
        .from('accounts')
        .insert([
          {
            user_id: user.id,
            amount: formData.amount,
            ifsc: formData.ifsc,
            account_number: formData.account_number,
            account_name: formData.account_name,
            bank_name: formData.bank_name,
            upi_id: formData.upi_id
          }
        ]);

      if (error) throw error;
      
      // Reset form and fetch updated accounts
      resetForm();
      fetchAccounts(user.id);
    } catch (error) {
      console.error('Error adding account:', error);
    }
  };

  const handleDeleteAccount = async (accountId) => {
    if (window.confirm('Are you sure you want to delete this account?')) {
      try {
        const { error } = await supabase
          .from('accounts')
          .delete()
          .eq('id', accountId);

        if (error) throw error;
        
        // Refresh accounts list after deletion
        fetchAccounts(user.id);
      } catch (error) {
        console.error('Error deleting account:', error);
      }
    }
  };

  const handleSignOut = async () => {
    await supabase.auth.signOut();
    router.push('/auth');
  };

  if (isLoading) {
    return (
      <div className={styles.container}>
        <p>Loading...</p>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>P2P Transactions</title>
        <meta name="description" content="P2P transaction page" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className={styles.header}>
        <div className={styles.logo}>P2P Platform</div>
        <nav className={styles.nav}>
          <Link href="/" className={styles.navLink}>Home</Link>
          <Link href="/p2p" className={`${styles.navLink} ${styles.activeLink}`}>P2P</Link>
        </nav>
        <div className={styles.auth}>
          {user && (
            <div className={styles.userSection}>
              <span className={styles.userEmail}>{user.user_metadata?.username || user.email}</span>
              <button onClick={handleSignOut} className={styles.signOutBtn}>Sign Out</button>
            </div>
          )}
        </div>
      </header>

      <main className={styles.main} style={{ width: '100%', padding: '0 20px' }}>
        <h1 className={styles.title} style={{ marginBottom: '1rem', textAlign: 'center' }}>P2P Transaction</h1>
        
        {/* Form and Account Details Container */}
        <div style={{ width: '100%', maxWidth: '800px', margin: '0 auto' }}>
          {/* Add New Account Form */}
          <h2 className={styles.sectionTitle} style={{ textAlign: 'center', marginBottom: '1.5rem' }}>Add New Account</h2>
          <form onSubmit={handleSubmit} className={styles.p2pForm} style={{ width: '100%' }}>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '15px', width: '100%' }}>
              {/* First row - Amount and Bank Name */}
              <div style={{ display: 'flex', gap: '15px', width: '100%' }}>
                <div className={styles.formGroup} style={{ flex: '1', backgroundColor: 'rgba(38, 193, 126, 0.05)', padding: '10px', borderRadius: '8px' }}>
                  <label htmlFor="amount" style={{ fontWeight: 'bold', color: '#26C17E', marginBottom: '5px', display: 'block' }}>Amount (INR)</label>
                  <input
                    type="number"
                    id="amount"
                    name="amount"
                    value={formData.amount}
                    onChange={handleChange}
                    placeholder="Enter amount"
                    required
                    className={styles.formInput}
                    style={{ borderColor: '#26C17E', width: '100%', padding: '8px' }}
                  />
                </div>
                
                <div className={styles.formGroup} style={{ flex: '1' }}>
                  <label htmlFor="bank_name" style={{ marginBottom: '5px', display: 'block' }}>Bank Name</label>
                  <input
                    type="text"
                    id="bank_name"
                    name="bank_name"
                    value={formData.bank_name}
                    onChange={handleChange}
                    placeholder="Enter bank name"
                    required
                    className={styles.formInput}
                    style={{ width: '100%', padding: '8px' }}
                  />
                </div>
              </div>
              
              {/* Second row - IFSC and Account Number */}
              <div style={{ display: 'flex', gap: '15px', width: '100%' }}>
                <div className={styles.formGroup} style={{ flex: '1' }}>
                  <label htmlFor="ifsc" style={{ marginBottom: '5px', display: 'block' }}>IFSC Code</label>
                  <input
                    type="text"
                    id="ifsc"
                    name="ifsc"
                    value={formData.ifsc}
                    onChange={handleChange}
                    placeholder="Enter IFSC code"
                    required
                    className={styles.formInput}
                    style={{ width: '100%', padding: '8px' }}
                  />
                </div>
                
                <div className={styles.formGroup} style={{ flex: '1' }}>
                  <label htmlFor="account_number" style={{ marginBottom: '5px', display: 'block' }}>Account Number</label>
                  <input
                    type="text"
                    id="account_number"
                    name="account_number"
                    value={formData.account_number}
                    onChange={handleChange}
                    placeholder="Enter account number"
                    required
                    className={styles.formInput}
                    style={{ width: '100%', padding: '8px' }}
                  />
                </div>
              </div>
              
              {/* Third row - Account Holder Name and UPI ID */}
              <div style={{ display: 'flex', gap: '15px', width: '100%' }}>
                <div className={styles.formGroup} style={{ flex: '1' }}>
                  <label htmlFor="account_name" style={{ marginBottom: '5px', display: 'block' }}>Account Holder Name</label>
                  <input
                    type="text"
                    id="account_name"
                    name="account_name"
                    value={formData.account_name}
                    onChange={handleChange}
                    placeholder="Enter account holder name"
                    required
                    className={styles.formInput}
                    style={{ width: '100%', padding: '8px' }}
                  />
                </div>
                
                <div className={styles.formGroup} style={{ flex: '1' }}>
                  <label htmlFor="upi_id" style={{ marginBottom: '5px', display: 'block' }}>UPI ID (Optional)</label>
                  <input
                    type="text"
                    id="upi_id"
                    name="upi_id"
                    value={formData.upi_id}
                    onChange={handleChange}
                    placeholder="Enter UPI ID (optional)"
                    className={styles.formInput}
                    style={{ width: '100%', padding: '8px' }}
                  />
                </div>
              </div>
            </div>
            
            <div style={{ marginTop: '15px' }}>
              <button type="submit" className={styles.submitButton} style={{ width: '100%', padding: '10px', fontSize: '1rem', fontWeight: 'bold', backgroundColor: '#26C17E', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}>
                Add Account
              </button>
            </div>
          </form>

          {/* Account Details Section */}
          <div style={{ marginTop: '2rem' }}>
            <h2 className={styles.sectionTitle} style={{ textAlign: 'center', marginBottom: '1.5rem' }}>Account Details</h2>
            
            {/* Daily Totals */}
            <div style={{ marginBottom: '1.5rem' }}>
              <h3 style={{ marginBottom: '0.5rem' }}>Daily Totals</h3>
              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>
                {Object.entries(dailyTotals).map(([date, total]) => (
                  <div key={date} style={{ backgroundColor: '#f0f0f0', padding: '10px', borderRadius: '5px', minWidth: '150px' }}>
                    <div style={{ fontWeight: 'bold' }}>{date}</div>
                    <div style={{ color: '#26C17E' }}>₹{total.toFixed(2)}</div>
                  </div>
                ))}
              </div>
            </div>
            
            {/* Accounts Table */}
            <div style={{ overflowX: 'auto' }}>
              <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                <thead>
                  <tr style={{ backgroundColor: '#f0f0f0' }}>
                    <th style={{ padding: '10px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Amount</th>
                    <th style={{ padding: '10px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Bank</th>
                    <th style={{ padding: '10px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Account Number</th>
                    <th style={{ padding: '10px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Account Holder</th>
                    <th style={{ padding: '10px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Date</th>
                    <th style={{ padding: '10px', textAlign: 'center', borderBottom: '1px solid #ddd' }}>Action</th>
                  </tr>
                </thead>
                <tbody>
                  {accounts.length > 0 ? (
                    accounts.map(account => (
                      <tr key={account.id} style={{ borderBottom: '1px solid #ddd' }}>
                        <td style={{ padding: '10px', color: '#26C17E', fontWeight: 'bold' }}>₹{parseFloat(account.amount).toFixed(2)}</td>
                        <td style={{ padding: '10px' }}>{account.bank_name}</td>
                        <td style={{ padding: '10px' }}>{account.account_number}</td>
                        <td style={{ padding: '10px' }}>{account.account_name}</td>
                        <td style={{ padding: '10px' }}>{new Date(account.created_at).toLocaleDateString()}</td>
                        <td style={{ padding: '10px', textAlign: 'center' }}>
                          <button 
                            onClick={() => handleDeleteAccount(account.id)} 
                            style={{ backgroundColor: '#ff4d4f', color: 'white', border: 'none', padding: '5px 10px', borderRadius: '4px', cursor: 'pointer' }}
                          >
                            Delete
                          </button>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan="6" style={{ padding: '20px', textAlign: 'center' }}>No accounts found. Add your first account above.</td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <p>&copy; {new Date().getFullYear()} P2P Platform. All rights reserved.</p>
      </footer>
    </div>
  );
}
